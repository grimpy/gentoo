diff --git a/extensions/tab-panel.c b/extensions/tab-panel.c
index 6fb1fc8..067d275 100644
--- a/extensions/tab-panel.c
+++ b/extensions/tab-panel.c
@@ -71,25 +71,47 @@ tab_panel_get_toolitem_for_view (GtkWidget* view)
 {
     return g_object_get_data (G_OBJECT (view), "tab-panel-ext-toolitem");
 }
+typedef struct {
+    GtkTreeIter iter;
+    gpointer view;
+    gboolean found;
+} ForUserData;
+
+static gboolean
+tab_panel_get_iter_for_view_helper(GtkTreeModel* model,
+                            GtkTreePath* path,
+                            GtkTreeIter* iter,
+                            ForUserData* helper)
+{
+    MidoriView* view_;
+    gtk_tree_model_get (model, iter, 0, &view_, -1);
+    g_object_unref (view_);
+    if (view_ == helper->view)
+    {
+        helper->found = TRUE;
+        helper->iter = *iter;
+        return TRUE;
+    }
+    return FALSE;
+
+}
 
 static gboolean
 tab_panel_get_iter_for_view (GtkTreeModel* model,
                              GtkTreeIter*  iter,
                              gpointer      view)
 {
-    guint i = 0;
-
-    while (gtk_tree_model_iter_nth_child (model, iter, NULL, i))
+    ForUserData helper;
+    helper.view = view;
+    helper.found = FALSE;
+    gtk_tree_model_foreach(model,
+                        (GtkTreeModelForeachFunc)tab_panel_get_iter_for_view_helper,
+                        &helper);
+    if (helper.found == TRUE)
     {
-        MidoriView* view_;
-
-        gtk_tree_model_get (model, iter, 0, &view_, -1);
-        g_object_unref (view_);
-        if (view_ == view)
-            return TRUE;
-        i++;
+        *iter = helper.iter;
+        return TRUE;
     }
-
     return FALSE;
 }
 
@@ -206,7 +228,6 @@ midori_extension_button_release_event_cb (GtkWidget*       widget,
 {
     GtkTreeModel* model;
     GtkTreeIter iter;
-
     if (event->button < 1 || event->button > 3)
         return FALSE;
 
@@ -233,7 +254,7 @@ midori_extension_button_release_event_cb (GtkWidget*       widget,
             tab_panel_popup (widget, event, view);
 
         g_object_unref (view);
-        return TRUE;
+        return FALSE;
     }
     return FALSE;
 }
@@ -279,6 +300,42 @@ tab_panel_settings_notify_cb (MidoriWebSettings* settings,
         gtk_tree_store_set (GTK_TREE_STORE (model), &iter, 2, buttons, -1);
 }
 
+static void recursivemove(GtkTreeModel* model, GtkTreeIter iter, GtkTreeIter newparent, gboolean useparent)
+{
+    if(gtk_tree_model_iter_has_child(model, &iter))
+    {
+        //change parents
+        gint count = 0;
+        GtkTreeIter child;
+        //GtkTreeIter newparent;
+        gboolean hasparent = TRUE;
+        if ( !useparent)
+        {
+            hasparent = gtk_tree_model_iter_parent (model, &newparent, &iter);
+        }
+        while(gtk_tree_model_iter_nth_child(model, &child, &iter, count))
+        {
+            GtkTreeIter newchild;
+            gint ellipsize;
+            gboolean buttons;
+            GtkWidget* childview;
+            gchar* title;
+            gtk_tree_model_get (model, &child, 2, &buttons,
+            4, &title, 5, &ellipsize, 0, &childview, -1);
+            GdkPixbuf* icon = midori_view_get_icon (MIDORI_VIEW (childview));
+            gtk_tree_store_insert_with_values (GTK_TREE_STORE (model),
+            &newchild, hasparent? &newparent: NULL, 8,
+            0, childview, 1, GTK_STOCK_CLOSE, 2, buttons,
+            3, icon, 4, title, 5, ellipsize, 6, NULL, -1);
+            if(gtk_tree_model_iter_has_child(model, &child))
+            {
+                recursivemove(model, child, newchild, TRUE);
+            }
+            count++;
+        }
+    }
+}
+
 static void
 tab_panel_remove_view (MidoriBrowser* browser,
                        GtkWidget*     view,
@@ -294,7 +351,11 @@ tab_panel_remove_view (MidoriBrowser* browser,
         GtkTreeModel* model = tab_panel_get_model_for_browser (browser);
         GtkTreeIter iter;
         if (tab_panel_get_iter_for_view (model, &iter, view))
+        {
+            GtkTreeIter parent;
+            recursivemove(model, iter, parent, FALSE);
             gtk_tree_store_remove (GTK_TREE_STORE (model), &iter);
+        }
     }
 }
 
@@ -506,7 +567,8 @@ tab_panel_app_add_browser_cb (MidoriApp*       app,
     g_object_set_data (G_OBJECT (browser), "tab-panel-ext-model", model);
     treeview = gtk_tree_view_new_with_model (GTK_TREE_MODEL (model));
     gtk_tree_view_set_headers_visible (GTK_TREE_VIEW (treeview), FALSE);
-    gtk_tree_view_set_show_expanders (GTK_TREE_VIEW (treeview), FALSE);
+    gtk_tree_view_set_show_expanders (GTK_TREE_VIEW (treeview), TRUE);
+    gtk_tree_view_set_reorderable (GTK_TREE_VIEW (treeview), TRUE);
     #if GTK_CHECK_VERSION (2, 12, 0)
     g_signal_connect (treeview, "query-tooltip",
         G_CALLBACK (tab_panel_treeview_query_tooltip_cb), NULL);
